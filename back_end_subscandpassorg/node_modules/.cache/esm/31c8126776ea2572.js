let bcrypt,mongoose,Schema;_76e‍.x([["default",()=>_76e‍.o]]);_76e‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_76e‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}],["Schema",["Schema"],function(v){Schema=v}]]);






const userSchema = new Schema({

 name:{
      type: String,
      trim: true,
      required: true

    },

    email:{
      type: String, 
      trim: true,
      unique: true,
      required: true

    },


    password:{
      type: String, 
      trim: true,
      unique: false,
      min: 6,
      max: 50,
      required: true

    }





},{timestamps:true})


userSchema.pre("save",function(next){
  

  let user = this


  _76e‍.g.console.log('insdide the schema ---------------------------------', user);


  if(User.isModified('password')){

    return bcrypt.hash(user.password,12,function(error,hash){

      if(error){
        _76e‍.g.console.log("THere was a problem with the hasing",error)
      return next();}
      user.password=hash;
      return next();





    })
  } else {
  return next();}




})



_76e‍.d(mongoose.model("User", userSchema));